---
# util_server-role/tasks/pi-hole.yml
- name: Check wheter pi-hole is already installed, by checking presence of gravity database
  ansible.builtin.stat:
    path: /etc/pihole/gravity.db
  register: pihole_db

- name: Feedback on presence of gravity db and extrapolated pi-hole status
  ansible.builtin.debug:
    msg: "Pi-hole is present on this system"
  when: pihole_db.stat.exists

# Even when gravity.db is found, we still may wish to re-install
- name: Include tasks to actually (re-)install pihole
  ansible.builtin.import_tasks:
    file: install-pihole.yml
  when: install_pihole

# Do not mess with the db if there is no db (should not occur at this point in the script)
- name: Import tasks to update the gravity database with adlists, and white- and blacklists
  ansible.builtin.import_tasks:
    file: pihole-listmanage.yml
  when: do_pihole or pihole_db.stat.exists or install_pihole

# In pi-hole web interface, this is known as the 'local DNS'
# As this may contain sensitive info, the src is the private repository
# You can include a custom.list in ./files as well, just put custom.list in the src: parameter
# Remember to export PRIVATE_REPO!

- name: Assert existence of PRIVATE_REPO environment variable
  ansible.builtin.assert:
    that:
      - lookup('ansible.builtin.env', 'PRIVATE_REPO') | length > 0
    fail_msg: "You have not set PRIVATE_REPO. Default will be '~' (user's home)"
    success_msg: "Correctly set PRIVATE_REPO"

- name: Place the file with custom DNS entries into pihole configuration folder
  ansible.builtin.copy:
    dest: /etc/pihole/custom.list
    src: "{{ lookup('ansible.builtin.env', 'PRIVATE_REPO', default='~') }}/inventory/client.list"
    mode: "0644"
    owner: pihole
    group: pihole
    remote_src: false
