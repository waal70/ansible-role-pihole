---
# util_server-role/tasks/pi-hole.yml
- name: Check wheter pi-hole is already installed, by checking presence of gravity database
  ansible.builtin.stat:
    path: /etc/pihole/gravity.db
  register: pihole_db

- name: Feedback on presence of gravity db and extrapolated pi-hole status
  ansible.builtin.debug:
    msg: "Pi-hole is present on this system"
  when: pihole_db.stat.exists

# Even when gravity.db is found, we still may wish to re-install
- name: Include tasks to actually (re-)install pihole
  ansible.builtin.import_tasks:
    file: install-pihole.yml
  when: install_pihole

- name: Upgrade pi-hole if it is already installed
  ansible.builtin.command:
    cmd: pihole -up
  environment:
    PIHOLE_SKIP_OS_CHECK: 'true'
  become: true
  register: pihole_update
  when: pihole_db.stat.exists and not install_pihole
  changed_when: "'Everything is up to date!' not in pihole_update.stdout"

# Check if pihole-FTL is running. If not, we will try to fix it
- name: Check status of pihole-FTL
  ansible.builtin.systemd:
    name: pihole-FTL
  register: pihole_ftl_status

- name: Tell user the status of pihole-FTL
  ansible.builtin.debug:
    msg: "FTL is {{ pihole_ftl_status.status.ActiveState }}. Trying corrective action."
  when: pihole_ftl_status.status.ActiveState != "active"

- name: Take corrective action if FTL not running
  ansible.builtin.include_tasks: correct-systemd-piholeFTL.yml
  when: pihole_ftl_status.status.ActiveState != "active"

# Do not mess with the db if there is no db (should not occur at this point in the script)
- name: Import tasks to update the gravity database with adlists, and white- and blacklists
  ansible.builtin.import_tasks:
    file: pihole-listmanage.yml
  when: do_pihole or pihole_db.stat.exists or install_pihole

# This directory should already be there
- name: Create the dnsmasq config directory if it does not exist yet
  ansible.builtin.file:
    path: /etc/dnsmasq.d
    state: directory
    mode: "0755"

# This is where we tell the DNS service to attach to the target interface
- name: Place the custom configuration into the dnsmasq.d directory
  ansible.builtin.template:
    src: etc/dnsmasq.d/99-pihole.conf.j2
    dest: /etc/dnsmasq.d/99-pihole.conf
    mode: "0644"

# In pi-hole web interface, this is known as the 'local DNS'
# As this may contain sensitive info, the src is the private repository
# You can include a custom.list in ./files as well, just put custom.list in the src: parameter
# Remember to export PRIVATE_REPO!

- name: Assert existence of PRIVATE_REPO environment variable
  ansible.builtin.assert:
    that:
      - lookup('ansible.builtin.env', 'PRIVATE_REPO') | length > 0
    fail_msg: "You have not set PRIVATE_REPO. Default will be '~' (user's home)"
    success_msg: "Correctly set PRIVATE_REPO"

- name: Place the file with custom DNS entries into pihole configuration folder
  ansible.builtin.copy:
    dest: /etc/pihole/custom.list
    src: "{{ lookup('ansible.builtin.env', 'PRIVATE_REPO', default='~') }}/inventory/client.list"
    mode: "0644"
    owner: pihole
    group: pihole
    remote_src: false
